{"version":3,"sources":["api.js","components/CardReaderItem/CardReaderItem.js","components/CardReaderList/CardReaderList.js","components/CashAcceptorItem/CashAcceptorItem.js","components/CashAcceptorList/CashAcceptorList.js","components/CashDispenserItem/CashDispenserItem.js","components/CashDispenserList/CashDispenserList.js","components/PosItem/MerchantInputList/MerchantInputList.js","components/PosItem/PosItem.js","components/PosList/PosList.js","components/PrinterItem/PrinterItem.js","components/PrinterList/PrinterList.js","components/ProductDispenserItem/DispenserProductItem/DispenserProductItem.js","components/ProductDispenserItem/DispenserProductList/DispenserProductList.js","components/ProductDispenserItem/ProductDispenserItem.js","components/ProductDispenserList/ProductDispenserList.js","App.js","index.js"],"names":["data","CardReaderItem","cardReaderItem","className","driver","modName","modVersion","port","status","statusDescr","CardReaderList","PropTypes","shape","id","string","isRequired","number","cardReader","map","key","CashAcceptorItem","cashAcceptorItem","type","version","CashAcceptorList","cashAcceptor","CashDispenserItem","cashDispenserItem","products","lenngth","product","CashDispenserList","arrayOf","cashDispenser","MerchantInputList","optionItem","useState","merchantIdx","merchantIdxValue","setMerchantIdxValue","htmlFor","value","onChange","event","target","PosItem","posItem","options","length","PosList","POS","PrinterItem","printerItem","papperState","PrinterList","printerList","DispenserProductItem","productItem","class","classValue","setClassValue","count","countValue","setCountValue","nameValue","setNameValue","setValue","name","dispenserProductItemType","propsTypes","DispenserProductList","productList","index","ProductDispenserItem","productDispenserItem","ProductDispenserList","productDispenser","App","Tree","deviceTree","TreeType","deviceTreeTypeMap","CardReader","uuidv4","CashAcceptor","CashDispenser","cashDispenseItem","productsItem","productsIndex","Printer","ProductDispenser","productDispenserIndex","canEdit","POSItem","POSIndex","option","optionIndex","optionPos","filter","item","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.32167e7f.chunk.js","sourcesContent":["export const data =  {\r\n    \"api\": {\r\n      \"deviceTree\": {\r\n        \"CardReader\": [\r\n          {\r\n            \"driver\": \"MicroelectronicaNFC\",\r\n            \"modName\": \"CardReader\",\r\n            \"modVersion\": 1,\r\n            \"port\": \"/dev/serial/by-id/usb-Silicon_Labs_CP2104_USB_to_UART_Bridge_Controller_014DF6DF-if00-port0\",\r\n            \"status\": 0,\r\n            \"statusDescr\": \"Idling\"\r\n          }\r\n        ],\r\n        \"CashAcceptor\": [\r\n          {\r\n            \"driver\": \"ID003\",\r\n            \"modName\": \"Money\",\r\n            \"modVersion\": 3,\r\n            \"port\": \"/dev/ttyS0\",\r\n            \"status\": 0,\r\n            \"type\": \"JCM\",\r\n            \"version\": \"S(UKR)-03-MW SM-BDP04V029-21 28FEB17     \"\r\n          }\r\n        ],\r\n        \"CashDispenser\": [\r\n          {\r\n            \"modName\": \"Dispenser\",\r\n            \"modVersion\": 2,\r\n            \"products\": [\r\n              \r\n            ]\r\n          }\r\n        ],\r\n        \"POS\": [\r\n          {\r\n            \"driver\": \"Ingenico\",\r\n            \"modName\": \"POS\",\r\n            \"modVersion\": 1,\r\n            \"options\": [\r\n              {\r\n                \r\n              },\r\n              {\r\n                \"merchantIdx\": \"1\"\r\n              }\r\n            ],\r\n            \"port\": \"/dev/serial/by-id/usb-INGENICO_Ingenico_iUP250-if00\",\r\n            \"status\": 0\r\n          }\r\n        ],\r\n        \"Printer\": [\r\n          {\r\n            \"driver\": \"SeaRRO\",\r\n            \"modName\": \"Printer\",\r\n            \"modVersion\": 1,\r\n            \"papperState\": -1,\r\n            \"port\": \"/dev/serial/by-id/usb-Silicon_Labs_CP2102_USB_to_UART_Bridge_Controller_0001-if00-port0\",\r\n            \"status\": 0\r\n          }\r\n        ],\r\n        \"ProductDispenser\": [\r\n          {\r\n            \"driver\": \"ICT-CVD\",\r\n            \"modName\": \"Dispenser\",\r\n            \"modVersion\": 2,\r\n            \"port\": \"/dev/ttyS5\",\r\n            \"products\": [\r\n              {\r\n                \"class\": \"Fare card\",\r\n                \"count\": 75,\r\n                \"name\": \"Kharkov fare card\"\r\n              }\r\n            ],\r\n            \"status\": 0\r\n          }\r\n        ]\r\n      },\r\n      \"deviceTreeTypeMap\": {\r\n        \"CashDispenser\": [\r\n          {\r\n            \"products\": [\r\n              \r\n            ]\r\n          }\r\n        ],\r\n        \"POS\": [\r\n          {\r\n            \"options\": [\r\n              {\r\n                \r\n              },\r\n              {\r\n                \"merchantIdx\": \"number\"\r\n              },\r\n              {\r\n                \r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"ProductDispenser\": [\r\n          {\r\n            \"products\": [\r\n              {\r\n                \"count\": \"number\"\r\n              }\r\n            ]\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  };","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const CardReaderItem = ({ cardReaderItem }) => {\r\n    return (\r\n        <div className=\"card-reader-item\">\r\n            <p>driver: <span className=\"embed-text\">{cardReaderItem.driver}</span></p>\r\n            <p>modName: <span className=\"embed-text\">{cardReaderItem.modName}</span></p>\r\n            <p>modVersion: <span className=\"embed-text\">{cardReaderItem.modVersion}</span></p>\r\n            <p>port: <span className=\"embed-text\">{cardReaderItem.port}</span></p>\r\n            <p>status: <span className=\"embed-text\">{cardReaderItem.status}</span></p>\r\n            <p>statusDescr: <span className=\"embed-text\">{cardReaderItem.statusDescr}</span></p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const CardReaderItemType = {\r\n    cardReaderItem: PropTypes.shape({\r\n        id: PropTypes.string.isRequired,\r\n        driver: PropTypes.string.isRequired,\r\n        modName: PropTypes.string.isRequired,\r\n        modVersion: PropTypes.number.isRequired,\r\n        port: PropTypes.string.isRequired,\r\n        status: PropTypes.number.isRequired,\r\n        statusDescr: PropTypes.string.isRequired,\r\n    })\r\n};\r\n\r\nCardReaderItem.propTypes = CardReaderItemType;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport 'materialize-css/dist/css/materialize.min.css'\r\n\r\nimport { CardReaderItem, CardReaderItemType } from '../CardReaderItem/CardReaderItem';\r\n\r\nexport const CardReaderList = ({cardReader}) => {\r\n\r\n    return (\r\n        <div className=\"card #f5f5f5 grey lighten-4 card-reader-list\">\r\n            {\r\n                cardReader.map(cardReaderItem => (\r\n                    <CardReaderItem cardReaderItem={cardReaderItem} key={cardReaderItem.id} />\r\n                ))\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n\r\nCardReaderList.propTypes = {\r\n    cardReader: PropTypes.arrayOf(CardReaderItemType.cardReaderItem)\r\n};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const CashAcceptorItem = ({ cashAcceptorItem }) => {\r\n    return (\r\n        <div className=\"cash-acceptor-item\">\r\n            <p>driver: <span className=\"embed-text\">{cashAcceptorItem.driver}</span></p>\r\n            <p>modName: <span className=\"embed-text\">{cashAcceptorItem.modName}</span></p>\r\n            <p>modVersion: <span className=\"embed-text\">{cashAcceptorItem.modVersion}</span></p>\r\n            <p>port: <span className=\"embed-text\">{cashAcceptorItem.port}</span></p>\r\n            <p>status: <span className=\"embed-text\">{cashAcceptorItem.status}</span></p>\r\n            <p>type: <span className=\"embed-text\">{cashAcceptorItem.type}</span></p>\r\n            <p>version:<span className=\"embed-text\"> {cashAcceptorItem.version}</span></p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const CashAcceptorItemType = {\r\n    cashAcceptorItem: PropTypes.shape({\r\n        id: PropTypes.string.isRequired,\r\n        driver: PropTypes.string.isRequired,\r\n        modName: PropTypes.string.isRequired,\r\n        modVersion: PropTypes.number.isRequired,\r\n        port: PropTypes.string.isRequired,\r\n        status: PropTypes.number.isRequired,\r\n        type: PropTypes.string.isRequired,\r\n        version: PropTypes.string.isRequired,\r\n    })\r\n};\r\n\r\nCashAcceptorItem.propTypes = CashAcceptorItemType;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { CashAcceptorItem, CashAcceptorItemType } from '../CashAcceptorItem/CashAcceptorItem';\r\n\r\nexport const CashAcceptorList = ({cashAcceptor}) => {\r\n    return (\r\n        <div className=\"card #f5f5f5 grey lighten-4 cash-acceptor-list\">\r\n            {\r\n                cashAcceptor.map(cashAcceptorItem => (\r\n                    <CashAcceptorItem cashAcceptorItem={cashAcceptorItem} key={cashAcceptorItem.id} />\r\n                ))\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nCashAcceptorList.propTypes = {\r\n    cashAcceptor: PropTypes.arrayOf(CashAcceptorItemType.cashAcceptorItem)\r\n};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nexport const CashDispenserItem = ({cashDispenserItem}) => {\r\n\r\n    return (\r\n        <div className=\"cash-dispenser-item\">\r\n            <p>modName: <span className=\"embed-text\">{cashDispenserItem.modName} </span></p>\r\n            <p>modVersion: <span className=\"embed-text\">{cashDispenserItem.modVersion}</span> </p>\r\n            <ul>\r\n                {\r\n                    cashDispenserItem.products.lenngth\r\n                        ? cashDispenserItem.products.map(product => (\r\n                            <li key={product.id}>...content</li>\r\n                        ))\r\n                        : <p>Array is empty :(</p>\r\n                }\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const cashDispenserItemType = {\r\n    cashDispenserItem: PropTypes.shape({\r\n        id: PropTypes.string.isRequired,\r\n        modName: PropTypes.string.isRequired,\r\n        modVersion: PropTypes.number.isRequired,\r\n        products: PropTypes.arrayOf(PropTypes.shape({})),\r\n    }),\r\n};\r\n\r\nCashDispenserItem.propTypes = cashDispenserItemType;","import React from 'react';\r\nimport { CashDispenserItem, cashDispenserItemType } from '../CashDispenserItem/CashDispenserItem';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nexport const CashDispenserList = ({ cashDispenser }) => {\r\n\r\n    return (\r\n        <div className=\"card #f5f5f5 grey lighten-4 cash-dispenser-list\" >\r\n            {\r\n                cashDispenser.map(cashDispenserItem => (\r\n                    <CashDispenserItem cashDispenserItem={cashDispenserItem} key={cashDispenserItem.id} />\r\n                ))\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nCashDispenserList.propTypes = {\r\n    cashDispenser: PropTypes.arrayOf(PropTypes.shape({\r\n        ...cashDispenserItemType\r\n    }))\r\n}","import React, { useState } from 'react';\r\n\r\n\r\nexport const MerchantInputList = ({ optionItem }) => {\r\n    const [merchantIdxValue, setMerchantIdxValue] = useState(optionItem.merchantIdx);\r\n\r\n    const handleChange = (event) => {\r\n        setMerchantIdxValue(event.target.value)\r\n    }\r\n\r\n    return (\r\n        <div className=\"card-label-wrapper\">\r\n            <label htmlFor=\"merchant-inp\" className=\"card-label\">\r\n                merchantIdx:\r\n                <input type=\"text\" id=\"merchant-inp\" value={merchantIdxValue} onChange={handleChange} />\r\n            </label>\r\n        </div>\r\n    );\r\n};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { MerchantInputList } from './MerchantInputList/MerchantInputList';\r\n\r\nexport const PosItem = ({ posItem }) => {\r\n\r\n    return (\r\n        <div className=\"pos-item\">\r\n            <p>driver: <span className=\"embed-text\">{posItem.driver}</span></p>\r\n            <p>modName: <span className=\"embed-text\">{posItem.modName}</span></p>\r\n            <p>modVersion: <span className=\"embed-text\">{posItem.modVersion}</span></p>\r\n            <p>port: <span className=\"embed-text\">{posItem.port}</span></p>\r\n            <p>status: <span className=\"embed-text\">{posItem.status}</span></p>\r\n\r\n            <div className=\"card-input-list\">\r\n                {\r\n                    posItem.options.length\r\n                        ? posItem.options.map(optionItem => (\r\n                            <MerchantInputList optionItem={optionItem} key={optionItem.id} />\r\n                        ))\r\n                        : <p>Array is empty :(</p>\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const posItemType = {\r\n    posItem: PropTypes.shape({\r\n        driver: PropTypes.string.isRequired,\r\n        modName: PropTypes.string.isRequired,\r\n        modVersion: PropTypes.number.isRequired,\r\n        options: PropTypes.arrayOf(PropTypes.shape({\r\n            merchantIdx: PropTypes.string\r\n        })),\r\n        port: PropTypes.string.isRequired,\r\n        status: PropTypes.number.isRequired,\r\n    })\r\n}\r\n\r\nPosItem.propTypes = posItemType;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { PosItem } from '../PosItem/PosItem';\r\nimport { posItemType } from '../PosItem/PosItem';\r\n\r\nexport const PosList = ({POS}) => {\r\n    return (\r\n        <div className=\"card #f5f5f5 grey lighten-4 pos-list\">\r\n            {\r\n                POS.map(posItem => (\r\n                    <PosItem posItem={posItem} key={posItem.id} />\r\n                ))\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nPosList.propTypes = {\r\n    POS: PropTypes.arrayOf(posItemType.posItem)\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const PrinterItem = ({ printerItem }) => {\r\n    return (\r\n        <div className=\"printer-item\">\r\n            <p>driver: <span className=\"embed-text\">{printerItem.driver}</span></p>\r\n            <p>modName: <span className=\"embed-text\">{printerItem.modName}</span></p>\r\n            <p>modVersion: <span className=\"embed-text\">{printerItem.modVersion}</span></p>\r\n            <p>papperState: <span className=\"embed-text\">{printerItem.papperState}</span></p>\r\n            <p>port: <span className=\"embed-text\">{printerItem.port}</span></p>\r\n            <p>status: <span className=\"embed-text\">{printerItem.status}</span></p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport const printerItemType = {\r\n    printerItem: PropTypes.shape({\r\n        driver: PropTypes.string.isRequired,\r\n        modName: PropTypes.string.isRequired,\r\n        modVersion: PropTypes.number.isRequired,\r\n        papperState: PropTypes.number.isRequired,\r\n        port: PropTypes.string.isRequired,\r\n        status: PropTypes.number.isRequired,\r\n        id: PropTypes.string.isRequired,\r\n    }),\r\n};\r\n\r\nPrinterItem.propTypes = printerItemType;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { PrinterItem } from '../PrinterItem/PrinterItem';\r\nimport { printerItemType } from '../PrinterItem/PrinterItem';\r\n\r\nexport const PrinterList = ({printerList}) => {\r\n    return (\r\n        <div className=\"card #f5f5f5 grey lighten-4 printer-list\">\r\n            {\r\n                printerList.map(printerItem => (\r\n                    <PrinterItem printerItem={printerItem} key={printerItem.id} />\r\n                ))\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nPrinterList.propTypes = {\r\n    printerList: PropTypes.arrayOf(printerItemType.printerItem).isRequired\r\n};","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const DispenserProductItem = ({ productItem }) => {\r\n    const [classValue, setClassValue] = useState(productItem.class);\r\n    const [countValue, setCountValue] = useState(productItem.count);\r\n    const [nameValue, setNameValue] = useState(productItem.class);\r\n\r\n    const setValue = (name, event) => {\r\n        const { value } = event.target;\r\n        switch (name) {\r\n            case 'class':\r\n                setClassValue(value);\r\n                break;\r\n            case 'count':\r\n                setCountValue(value);\r\n                break;\r\n            case 'name':\r\n                setNameValue(value);\r\n                break;\r\n            default:\r\n                return 1\r\n        }\r\n    }\r\n    \r\n    const {id} = productItem;\r\n    return (\r\n        <>\r\n            <div className=\"card-input-warpper\">\r\n                <label htmlFor=\"dispenser-inp-1\" className=\"card-label\">\r\n                    Class:\r\n                    <input type=\"text\" id=\"dispenser-inp-1\" value={classValue} onChange={(event) => setValue('class', event)} />\r\n                </label>\r\n            </div>\r\n            <div className=\"card-input-warpper\">\r\n                <label htmlFor=\"dispenser-inp-2\" className=\"card-label\">\r\n                    Count:\r\n                    <input type=\"text\" id=\"dispenser-inp-2\" value={countValue} onChange={(event) => setValue('count', event)} />\r\n                </label>\r\n            </div>\r\n            <div className=\"card-input-warpper\">\r\n                <label htmlFor=\"dispenser-inp-3\" className=\"card-label\">\r\n                    Name:\r\n                    <input type=\"text\" id=\"dispenser-inp-3\" value={nameValue} onChange={(event) => setValue('name', event)} />\r\n                </label>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport const dispenserProductItemType = {\r\n    productItem: PropTypes.shape({\r\n        class: PropTypes.string.isRequired,\r\n        count: PropTypes.number.isRequired,\r\n        name: PropTypes.string.isRequired,\r\n    })\r\n};\r\n\r\nDispenserProductItem.propsTypes = dispenserProductItemType;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { DispenserProductItem } from '../DispenserProductItem/DispenserProductItem';\r\n\r\nexport const DispenserProductList = ({ productList }) => {\r\n\r\n    return (\r\n        <div className=\"dispancer-product-list card-input-list\">\r\n            {\r\n                productList.map((productItem, index) => (\r\n                    <DispenserProductItem\r\n                        productItem={productItem}\r\n                        key={productItem.id}\r\n                    />\r\n                ))\r\n            }\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { DispenserProductList } from './DispenserProductList/DispenserProductList';\r\nimport { dispenserProductItemType } from './DispenserProductItem/DispenserProductItem';\r\n\r\nexport const ProductDispenserItem = ({ productDispenserItem }) => {\r\n    \r\n    return (\r\n        <div className=\"product-dispenser-item\">\r\n            <p>driver: <span className=\"embed-text\">{productDispenserItem.driver}</span></p>\r\n            <p>modName: <span className=\"embed-text\">{productDispenserItem.modName}</span></p>\r\n            <p>modVersion: <span className=\"embed-text\">{productDispenserItem.modVersion}</span></p>\r\n            <p>port: <span className=\"embed-text\">{productDispenserItem.port}</span></p>\r\n            <p>status: <span className=\"embed-text\">{productDispenserItem.status}</span></p>\r\n            <DispenserProductList productList={productDispenserItem.products} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const productDispenserItemType = {\r\n    productDispenserItem: PropTypes.shape({\r\n        driver: PropTypes.string.isRequired,\r\n        modName: PropTypes.string.isRequired,\r\n        modVersion: PropTypes.number.isRequired,\r\n        port: PropTypes.string.isRequired,\r\n        products: PropTypes.arrayOf(dispenserProductItemType.productItem).isRequired,\r\n        status: PropTypes.number.isRequired,\r\n        id: PropTypes.string.isRequired,\r\n    })\r\n};\r\n\r\nProductDispenserItem.propTypes = productDispenserItemType;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { ProductDispenserItem, productDispenserItemType } from '../ProductDispenserItem/ProductDispenserItem';\r\n\r\nexport const ProductDispenserList = ({productDispenser}) => {\r\n    return (\r\n        <div className=\"card #f5f5f5 grey lighten-4 product-dispenser-list\">\r\n            {\r\n                productDispenser.map(productDispenserItem => (\r\n                    <ProductDispenserItem\r\n                        productDispenserItem={productDispenserItem}\r\n                        key={productDispenserItem.id}\r\n                    />\r\n                ))\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nProductDispenserList.propTypes = {\r\n    productDispenser: PropTypes.arrayOf(productDispenserItemType.productDispenserItem)\r\n}","import React, { useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { data } from \"./api\";\n\nimport './App.css';\nimport { CardReaderList } from './components/CardReaderList/CardReaderList';\nimport { CashAcceptorList } from './components/CashAcceptorList/CashAcceptorList';\nimport { CashDispenserList } from './components/CashDispenserList/CashDispenserList';\nimport { PosList } from './components/PosList/PosList';\nimport { PrinterList } from './components/PrinterList/PrinterList';\nimport { ProductDispenserList } from './components/ProductDispenserList/ProductDispenserList';\n\nexport const App = () => {\n\n  // add unic id and delete empty items in array\n  const [deviceTree, setdeviceTree] = useState(() => {\n\n    const Tree = data.api.deviceTree;\n    const TreeType = data.api.deviceTreeTypeMap;\n\n    return {\n      CardReader: Tree.CardReader.map((cardReaderItem) => (\n        {\n          ...cardReaderItem,\n          id: uuidv4(),\n        }\n      )),\n\n      CashAcceptor: Tree.CashAcceptor.map((cashAcceptorItem) => (\n        {\n          ...cashAcceptorItem,\n          id: uuidv4(),\n        }\n      )),\n\n      CashDispenser: Tree.CashDispenser.map((cashDispenseItem) => (\n        {\n          ...cashDispenseItem,\n          products: cashDispenseItem.products.map((productsItem, productsIndex) => (\n            {\n              ...productsItem,\n              id: uuidv4(),\n            }\n          )),\n          id: uuidv4(),\n        }\n      )),\n\n      Printer: Tree.Printer.map((printerItem) => (\n        {\n          ...printerItem,\n          id: uuidv4(),\n        }\n      )),\n\n      ProductDispenser: Tree.ProductDispenser.map((productDispenserItem, productDispenserIndex) => (\n        {\n          ...productDispenserItem,\n          id: uuidv4(),\n          products: productDispenserItem.products.map((productsItem, productsIndex) => {\n            const product = TreeType.ProductDispenser[productDispenserIndex].products[productsIndex];\n\n            if (product && product.count === 'number') {\n              return (\n                {\n                  ...productsItem,\n                  id: uuidv4(),\n                  canEdit: true,\n                }\n              )\n            }\n            \n          })\n        }\n      )),\n\n      POS: Tree.POS.map((POSItem, POSIndex) => (\n        {\n          ...POSItem,\n          id: uuidv4(),\n          options: POSItem.options.map((option, optionIndex) => {\n            const optionPos = TreeType.POS[POSIndex].options[optionIndex];\n            if (optionPos && optionPos.merchantIdx === 'number') {\n              return (\n                {\n                  ...option,\n                  id: uuidv4(),\n                  canEdit: true,\n                }\n              )\n            }\n          }).filter(item => item)\n        }\n      ))\n    }\n  });\n\n  return (\n    <div className=\"app\">\n      <CardReaderList cardReader={deviceTree.CardReader} />\n      <CashAcceptorList cashAcceptor={deviceTree.CashAcceptor} />\n      <CashDispenserList cashDispenser={deviceTree.CashDispenser} />\n      <PosList POS={deviceTree.POS} />\n      <PrinterList printerList={deviceTree.Printer} />\n      <ProductDispenserList productDispenser={deviceTree.ProductDispenser} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}